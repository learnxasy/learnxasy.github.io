{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["NotFoundPage","Object","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","title","m","module","exports","require","default","React","createContext","PropTypes","object","string","isRequired","func","ProdPageRenderer","_ref","location","pageResources","createElement","InternalPageRenderer","assign","json","propTypes","shape","pathname","X","styled_base_browser_esm","target","name","styles","Y","linkStyle","Header","_ref4","x","y","core_browser_esm","css","header_ref2","_ref3","gatsby_browser_entry","to","replace","defaultProps","Layout","_ref2","children","react_default","a","Fragment","header","layout_ref","Date","getFullYear","href","node","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_1__","data","metaDescription","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","htmlAttributes","titleTemplate","content","property","author","concat","arrayOf"],"mappings":"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","file":"component---src-pages-404-js-d355efaa990309f7c587.js","sourcesContent":["import React from \"react\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst NotFoundPage = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>Uh oh...</h1>\n    <p>Looks like the page you're looking for doesn&#39;t exist. Sorry!</p>\n  </Layout>\n)\n\nexport default NotFoundPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { css } from \"@emotion/core\";\nimport styled from \"@emotion/styled\";\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport { Link } from \"gatsby\";\n\nconst X = styled.span`\n  color: red;\n`;\n\nconst Y = styled.span`\n  color: green;\n`;\n\nconst linkStyle = css`\n  text-decoration: none;\n  color: inherit;\n`;\n\nconst Header = ({ x, y }) => (\n  <header\n    css={css`\n      margin-bottom: 1.45rem;\n    `}\n  >\n    <div\n      css={css`\n        margin: 0 auto;\n        max-width: 960px;\n        padding: 1.45rem 1.0875rem;\n      `}\n    >\n      <h1\n        css={css`\n          margin: 0;\n          color: #333;\n          text-decoration: none;\n        `}\n      >\n        <Link to=\"/\" css={linkStyle}>learn</Link>&nbsp;\n        <Link to={x === `x` ? `/learn` : `/learn/${x}`} css={linkStyle}><X>{x.replace(`-`, ` `)}</X></Link> as&nbsp;\n        <Link to={x === `x` ? `/learn` : (y === `y` ? `/learn/${x}` : `/learn/${x}/as/${y}`)} css={linkStyle}><Y>{y.replace(`-`, ` `)}</Y></Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  x: PropTypes.string,\n  y: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  x: `x`,\n  y: `y`,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { css } from \"@emotion/core\";\n\nimport Header from \"./header\";\nimport \"./layout.css\";\n\nconst Layout = ({ x, y, children }) => {\n  return (\n    <>\n      <Header x={x} y={y} />\n      <div\n        css={css`\n          margin: 0 auto;\n          max-width: 960px;\n          padding: 0 1.0875rem 1.45rem;\n          padding-top: 0;\n        `}\n      >\n        <main>{children}</main>\n        <footer>\n          Â© {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}